
CREATE TABLE CUSTOMER(
	[IDCUSTOMER] INT IDENTITY PRIMARY KEY NOT NULL,
	[EMAIL] VARCHAR(255),
	[PASSWORD] NVARCHAR(255),
	[GENDER] VARCHAR(10),
	[PHONE] INT,
	[ADDRESS] NVARCHAR(255) DEFAULT N'You have not added a address yet.',
	[NICKNAME] NVARCHAR(255),
	[AVATAR] VARCHAR (MAX),
	[VERIFY] VARCHAR(255) DEFAULT 'UNVERIFY',
	[JOINDATE] DATETIME DEFAULT GETDATE()
)

create TABLE PRODUCT(
	[IDPRODUCT] INT IDENTITY PRIMARY KEY NOT NULL,
	[NAME] VARCHAR(255),
	[PRICE] DECIMAL(10,2),
	[IMAGE] VARBINARY(MAX),
	[IMAGETYPE] VARCHAR(MAX),
	[TYPE] VARCHAR(255),
	[CREATER] VARCHAR(255),
	[CREATEON] DATETIME DEFAULT GETDATE(),
	[UPDATER] VARCHAR(255),
	[LASTUPDATE] DATETIME,
	[RATE] DECIMAL(10,1) DEFAULT 0.0
)

CREATE TABLE [ORDERCUSTOMER](
	[IDORDER] VARCHAR(255) NOT NULL PRIMARY KEY,
	[IDCUSTOMER] INT,
	[IDPRODUCT] INT,
	[ADDRESS] VARCHAR(255),
	[NAMEPRODUCT] VARCHAR(255),
	[TYPE] VARCHAR(255),
	[QUANTITY] INT,
	[STATUS] VARCHAR(255) DEFAULT 'PROCESS',
	[PRICE] DECIMAL(10,2),
	[TOTAL] DECIMAL(10,2),
	[ORDER] DATETIME DEFAULT GETDATE(),
	[ORDERTIME] VARCHAR(255), 
	[DELAY] DATETIME,
	[DELAYEDTIME] VARCHAR(255),
	[COMPLETE] DATETIME,
	[COMPLETETIME] VARCHAR(255),
	[CANCEL] DATETIME,
	[CANCELTIME] DATETIME,
	[IMAGEPRODUCT] VARCHAR(MAX),
	[DISTANCE] VARCHAR(255),
	[RATE] INT DEFAULT 0,
	FOREIGN KEY([IDCUSTOMER]) REFERENCES CUSTOMER(IDCUSTOMER),
	FOREIGN KEY([IDPRODUCT]) REFERENCES PRODUCT(IDPRODUCT),
)

CREATE TABLE TRANSPORT(
	[IDCUSTOMER] INT not null,
	[IDORDER] VARCHAR(255) not null,
	[IDPRODUCT] INT not null,
	[CUSTOMERNIKCNAME] VARCHAR(255),
	[PHONENUMBER] INT,
	[TRANSPORTNAME] VARCHAR(255) DEFAULT 'Life of Coffie',
	[TRANSPORTCOST] float,
	[STATUS] VARCHAR(255) DEFAULT 'PROCESS',
	[DESCRIPTION] VARCHAR(255),
)

CREATE TABLE STAFF(
	[IDSTAFF] INT IDENTITY NOT NULL,
	[NAME] VARCHAR(255),
	[DOB] VARCHAR(255),
	[GENDER] VARCHAR(255),
	[ADDRESS] VARCHAR(255),
	[PHONENUMBER] int,
	[EMAIL]VARCHAR(255),
	[PASSWORD] VARCHAR(255) DEFAULT 'lifeofcoffie',
	[ROLE] VARCHAR(255),
	[JOINDATE] datetime default getdate(),
	[STAFFIMAGE] VARCHAR(MAX),
	[SPECIALCODE] VARCHAR(255),
	[LASTACTIVE] VARCHAR(255)
)

--Insert products's information
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Cream Cake', 3.99, 'CAKE')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Chocolate Cake', 5.99, 'CAKE')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Pancake', 4.99, 'CAKE')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Milk Cake', 6.99, 'CAKE')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Black Coffee', 3.99, 'COFFEE')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Pure Coffee', 4.99, 'COFFEE')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Milk Coffee', 3.99, 'COFFEE')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Moka Coffee', 3.99, 'COFFEE')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Chocolated Cream Coffee', 7.99, 'COLD COFFEE')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Soda Cold Coffee', 6.99, 'COLD COFFEE')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Socola Cookie', 2.99, 'COOKIES')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Croissant', 2.99, 'COOKIES')
INSERT INTO PRODUCT(NAME, PRICE, TYPE) VALUES('Pretzel', 3.99, 'COOKIES')

--Update images of products
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\cake1.png', SINGLE_BLOB) as [CAKE1]), IMAGETYPE = 'png' where IDPRODUCT = 1
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\cake2.png', SINGLE_BLOB) as [CAKE2]), IMAGETYPE = 'png' where IDPRODUCT = 2
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\cake3.png', SINGLE_BLOB) as [CAKE3]), IMAGETYPE = 'png' where IDPRODUCT = 3
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\cake4.png', SINGLE_BLOB) as [CAKE4]), IMAGETYPE = 'png' where IDPRODUCT = 4
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\coffee1.png', SINGLE_BLOB) as [COFFEE1]), IMAGETYPE = 'png' where IDPRODUCT = 5
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\coffee2.png', SINGLE_BLOB) as [COFFEE2]), IMAGETYPE = 'png' where IDPRODUCT = 6
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\coffee3.png', SINGLE_BLOB) as [COFFEE3]), IMAGETYPE = 'png' where IDPRODUCT = 7
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\coffee4.png', SINGLE_BLOB) as [COFFEE4]), IMAGETYPE = 'png' where IDPRODUCT = 8
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\cold-coffee.png', SINGLE_BLOB) as [COLD-COFFEE1]), IMAGETYPE = 'png' where IDPRODUCT = 9
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\cold-coffee2.png', SINGLE_BLOB) as [COLD-COFFEE2]), IMAGETYPE = 'png' where IDPRODUCT = 10
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\delicacies1.png', SINGLE_BLOB) as [COOKIE1]), IMAGETYPE = 'png' where IDPRODUCT = 11
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\delicacies2.png', SINGLE_BLOB) as [COOKIE2]), IMAGETYPE = 'png' where IDPRODUCT = 12
update PRODUCT SET IMAGE = (SELECT * FROM OPENROWSET(BULK N'D:\PRJ301ASSIGNMENT\products\delicacies3.png', SINGLE_BLOB) as [COOKIE3]), IMAGETYPE = 'png' where IDPRODUCT = 13

--Testing
SELECT IDPRODUCT, NAME, PRICE, TYPE, CAST('' as xml).value(
	'xs:base64Binary(sql:column("PRODUCT.IMAGE"))', 'VARCHAR(MAX)'
) as IMAGE, IMAGETYPE
from PRODUCT

select DATEPART(HOUR,[ORDER]) AS [DAY], DATEPART(MINUTE,[ORDER]) AS [MINUTE] from ORDERCUSTOMER
where DATEPART(HOUR,[ORDER]) <= 23 AND DATEPART(MINUTE,[ORDER]) <= 59

SELECT  Diff = CASE DATEDIFF(HOUR, StartTime, EndTime)
                    WHEN 0 THEN CAST(DATEDIFF(MINUTE, StartTime, EndTime) AS VARCHAR(10))
                    ELSE CAST(60 - DATEPART(MINUTE, StartTime) AS VARCHAR(10)) +
                        REPLICATE(',60', DATEDIFF(HOUR, StartTime, EndTime) - 1) + 
                        + ',' + CAST(DATEPART(MINUTE, EndTime) AS VARCHAR(10))
                END
FROM(VALUES 
            (CAST('11:15' AS TIME), CAST('13:15' AS TIME)),
            (CAST('10:45' AS TIME), CAST('18:59' AS TIME)),
            (CAST('10:45' AS TIME), CAST('11:59' AS TIME))
) t (StartTime, EndTime);